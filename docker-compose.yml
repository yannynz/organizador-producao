services:
  postgres-container:
    image: postgres:17 
    container_name: postgres-container
    environment:
      TZ: America/Sao_Paulo  # Configurando o fuso horário
      POSTGRES_DB: teste01
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "5433:5432"  # Mapeando a porta do banco de dados para a máquina local
    volumes:
      - pgdata17:/var/lib/postgresql/data  # Persistência de dados
      - /etc/timezone:/etc/timezone:ro  # Montando o arquivo timezone
      - /etc/localtime:/etc/localtime:ro  # Montando o arquivo localtime para configurar o fuso horário
    networks:
      - organizador-producao-mynetwork
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "teste01"]
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 20s

  backend-container:
    build: .
    container_name: backend-container
    ports:
      - "8081:8080"  # Mapeando a porta interna 8080 para 8081 na máquina local
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-container:5432/teste01  # Conexão com o banco
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 1234
      SPRING_RABBITMQ_HOST: rabbitmq-container
      SPRING_RABBITMQ_PORT: "5672"
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      APP_CORS_ALLOWED_ORIGINS: ${APP_CORS_ALLOWED_ORIGINS:-http://localhost:4200,http://localhost,http://nginx-container,http://nginx-container:80,http://frontend-container}

    depends_on:
      - postgres-container  # Garante que o PostgreSQL esteja pronto antes do backend
      - rabbitmq-container  # Garante que o RabbitMQ esteja pronto antes do backend
    
    networks:
      - organizador-producao-mynetwork

    volumes:
      - /tmp/nr:/tmp/nr:ro

  frontend-container:
    build:
      context: ./organizer-front  # Diretório onde está o código do seu front-end Angular
      dockerfile: Dockerfile
    container_name: frontend-container
    volumes:
      - ./organizer-front/dist:/usr/share/nginx/html  # Diretório do build do Angular
      - /etc/timezone:/etc/timezone:ro  # Montando o arquivo timezone
      - /etc/localtime:/etc/localtime:ro  # Montando o arquivo localtime
    depends_on:
      - backend-container
    networks:
      - organizador-producao-mynetwork

  nginx-container:
    image: public.ecr.aws/docker/library/nginx:latest
    container_name: nginx-container
    ports:
      - "80:80"  # Porta 80 do Nginx para acesso local
    depends_on:
      - frontend-container
    volumes:
      - ./organizer-front/dist/organizer-front/browser:/usr/share/nginx/html:ro  # Mapeando o diretório correto de build para o Nginx
      - ./nginx/organizador.conf:/etc/nginx/nginx.conf:ro  # Usando o arquivo correto de configuração
      - /etc/timezone:/etc/timezone:ro  # Montando o arquivo timezone
      - /etc/localtime:/etc/localtime:ro  # Montando o arquivo localtime
    networks:
      - organizador-producao-mynetwork

  rabbitmq-container:
    image: public.ecr.aws/docker/library/rabbitmq:management
    container_name: rabbitmq-container
    ports:
      - "5672:5672"  # Porta do RabbitMQ
      - "15672:15672"  # Porta para acessar o painel de administração
    environment:
      TZ: America/Sao_Paulo  # Configurando o fuso horário
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - /etc/timezone:/etc/timezone:ro  # Montando o arquivo timezone
      - /etc/localtime:/etc/localtime:ro  # Montando o arquivo localtime
    networks:
      - organizador-producao-mynetwork

  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter:latest
    container_name: rabbitmq-exporter
    environment:
      RABBIT_URL: http://rabbitmq-container:15672
      RABBIT_USER: guest
      RABBIT_PASSWORD: guest
      RABBIT_CAPABILITIES: bert,no_queue
    ports:
      - "9419:9419"
    depends_on:
      - rabbitmq-container
    networks:
      - organizador-producao-mynetwork

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://postgres:1234@postgres-container:5432/teste01?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres-container
    networks:
      - organizador-producao-mynetwork

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    pid: "host"
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.rootfs=/rootfs
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)
    networks:
      - organizador-producao-mynetwork

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    ports:
      - "8082:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - organizador-producao-mynetwork

  prometheus-container:
    image: prom/prometheus:latest
    container_name: prometheus-container
    ports:
      - "9090:9090"
    depends_on:
      - backend-container
      - rabbitmq-exporter
      - postgres-exporter
      - node-exporter
      - cadvisor
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus-alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus-data:/prometheus
    networks:
      organizador-producao-mynetwork:
        aliases:
          - prometheus

  grafana-container:
    image: grafana/grafana:10.4.1
    container_name: grafana-container
    depends_on:
      - prometheus-container
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s/"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - organizador-producao-mynetwork

networks:
  organizador-producao-mynetwork:
    driver: bridge

volumes:
  pgdata17:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
